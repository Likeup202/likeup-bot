{
  "name": "help",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "OJKAb",
  "actions": [
    {
      "title": "🤖 ${client.user.username}'s Commands",
      "author": "",
      "color": "0x0000FF",
      "timestamp": "true",
      "url": "",
      "authorIcon": "",
      "imageUrl": "",
      "thumbUrl": "${client.user.avatarURL()}",
      "storage": "1",
      "varName": "embedTemplate",
      "name": "Create Embed Message"
    },
    {
      "behavior": "0",
      "interpretation": "1",
      "code": "//help\nvar maxCommandsPerPage = 2;\nvar commandsList = [];\n\nconst fs = require('fs');\nvar embedTemplate = tempVars(\"embedTemplate\");\n\nfs.readFile(\"./data/commands.json\", async function(err, data) {\n    if (err) {\n        console.log(err);\n    }\n\n    var data = JSON.parse(data);\n\n    for (i = 0; i < data.length; i++) {\n        if (data[i] != null && data[i][\"actions\"][0] != null && data[i][\"actions\"][0].hasOwnProperty(\"comment\")) {\n            var comment = data[i][\"actions\"][0][\"comment\"];\n            if (comment.includes(\"[HELP]\")) {\n                commandsList.push(`**${data[i][\"name\"]}** ${comment.split(\"[HELP]\")[1].trim()}\\n\\n`);\n            }\n        }\n    }\n\n    var commandText = \"\";\n\n    if (commandsList.length > maxCommandsPerPage) {\n        var pages = [];\n        var pageText = [];\n        var pageIndex = 0;\n\n        while (commandsList.length) {\n            pages.push(commandsList.splice(0, maxCommandsPerPage))\n        }\n\n        for (i = 0; i < pages.length; i++) {\n            pageText[i] = \"\";\n            pages[i].forEach(pageTxt => {\n                pageText[i] += pageTxt;\n            })\n        }\n\n        var titleTemplate = embedTemplate.title;\n\n        embedTemplate.description = pageText[0];\n        embedTemplate.footer = {\n            text: \"Click the left and right arrow to browse the list! || Valid for 240 seconds\"\n        };\n        embedTemplate.title = `${titleTemplate} || [1/${pageText.length}]`\n\n        msg.channel.send({\n            embed: embedTemplate\n        }).then(messageSent => {\n            messageSent.react(\"⬅️\").then(() => {\n                messageSent.react(\"➡️\")\n            }).then(() => {\n                const collector = messageSent.createReactionCollector((reaction, user) => ['⬅️', '➡️'].includes(reaction.emoji.name) && user.id == msg.author.id, {\n                    time: 240000\n                });\n                collector.on('collect', async (reaction) => {\n                    reaction.users.remove(msg.author.id);\n                    var chng = false;\n                    if (pageIndex > 0 || pageIndex < pageText.length - 1) {\n\n                        switch (reaction.emoji.name) {\n                            case '⬅️':\n                                if (pageIndex > 0) {\n                                    pageIndex -= 1;\n                                    chng = true;\n                                }\n                                break;\n                            default:\n                                if (pageIndex < pageText.length - 1) {\n                                    pageIndex += 1;\n                                    chng = true;\n                                }\n                                break;\n                        }\n\n                        messageSent.embeds[0].description = pageText[pageIndex];\n                        messageSent.embeds[0].title = `${titleTemplate} || [${pageIndex + 1}/${pageText.length}]`;\n                        messageSent.edit(messageSent.embeds[0]);\n                    }\n                });\n                collector.on('end', collected => {\n                    messageSent.embeds[0].footer.text = \"Embed expired; reactions no longer work\";\n                    messageSent.edit(messageSent.embeds[0]);\n                });\n            });\n        });\n    } else {\n        for (i = 0; i < commandsList.length; i++) {\n            commandText += commandsList[i];\n        }\n\n        embedTemplate.description = commandText;\n\n        msg.channel.send({\n            embed: embedTemplate\n        });\n    }\n});",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    }
  ]
}